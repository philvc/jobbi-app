/**
 * Generated by orval v6.2.3 üç∫
 * Do not edit manually.
 * Jobbi Back-end
 * Swagger for Jobbi Back-end

Schemes: [http, https]
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction
} from 'react-query'
import type {
  SearchDTO
} from '../../types/dtos'
import { customInstance } from '.././config'

type AsyncReturnType<
T extends (...args: any) => Promise<any>
> = T extends (...args: any) => Promise<infer R> ? R : any;


/**
 * type id struct
Create search.
Return search
 */
export const addSearch = (
    searchDTO: SearchDTO,
 ) => {
      return customInstance<SearchDTO>(
      {url: `/searches`, method: 'post',
      data: searchDTO
    },
      );
    }
  


    export const useAddSearch = <TError = void,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof addSearch>, TError,{data: SearchDTO}, TContext>, }
) => {
      const {mutation: mutationOptions} = options || {}

      const mutationFn: MutationFunction<AsyncReturnType<typeof addSearch>, {data: SearchDTO}> = (props) => {
          const {data} = props || {};

          return  addSearch(data,)
        }

      return useMutation<AsyncReturnType<typeof addSearch>, TError, {data: SearchDTO}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * type id struct
Get search by id.
Return search
 */
export const getSearchById = (
    searchId: string,
 ) => {
      return customInstance<SearchDTO>(
      {url: `/searches/${searchId}`, method: 'get'
    },
      );
    }
  

export const getGetSearchByIdQueryKey = (searchId: string,) => [`/searches/${searchId}`];

    
export const useGetSearchById = <TData = AsyncReturnType<typeof getSearchById>, TError = void>(
 searchId: string, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getSearchById>, TError, TData>, }

  ) => {

  const {query: queryOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetSearchByIdQueryKey(searchId);
  const queryFn: QueryFunction<AsyncReturnType<typeof getSearchById>> = () => getSearchById(searchId, );

  const query = useQuery<AsyncReturnType<typeof getSearchById>, TError, TData>(queryKey, queryFn, {enabled: !!(searchId), ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

