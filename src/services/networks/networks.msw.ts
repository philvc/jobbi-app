/**
 * Generated by orval v6.2.4 🍺
 * Do not edit manually.
 * Jobbi Back-end
 * Swagger for Jobbi Back-end

Schemes: [http, https]
 * OpenAPI spec version: 1.0.0
 */
import {
  rest
} from 'msw'
import faker from 'faker'

export const getGetNetworksBySearchIdMock = () => ([...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({description: faker.random.word(), email: faker.random.word(), firstName: faker.random.word(), id: faker.random.word(), lastName: faker.random.word(), link: faker.random.word(), phoneNumber: faker.random.word(), searchId: faker.random.word(), userId: faker.random.word()})))

export const getAddNetworkMock = () => ({description: faker.random.word(), email: (() => faker.internet.email())(), firstName: (() => faker.name.firstName())(), id: faker.random.word(), lastName: (() => faker.name.lastName())(), link: faker.random.word(), phoneNumber: (() => faker.phone.phoneNumber("+32494######"))(), searchId: faker.random.word(), userId: faker.random.word()})

export const getGetNetworkByIdMock = () => ({description: faker.random.word(), email: (() => faker.internet.email())(), firstName: (() => faker.name.firstName())(), id: faker.random.word(), lastName: (() => faker.name.lastName())(), link: faker.random.word(), phoneNumber: (() => faker.phone.phoneNumber("+32494######"))(), searchId: faker.random.word(), userId: faker.random.word()})

export const getModifyNetworkMock = () => ({description: faker.random.word(), email: (() => faker.internet.email())(), firstName: (() => faker.name.firstName())(), id: faker.random.word(), lastName: (() => faker.name.lastName())(), link: faker.random.word(), phoneNumber: (() => faker.phone.phoneNumber("+32494######"))(), searchId: faker.random.word(), userId: faker.random.word()})

export const getDeleteNetworkMock = () => (faker.datatype.boolean())

export const getNetworksMSW = () => [
rest.get('*/searches/:searchId/networks', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetNetworksBySearchIdMock()),
        )
      }),rest.post('*/searches/:searchId/networks', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getAddNetworkMock()),
        )
      }),rest.get('*/searches/:searchId/networks/:networkId', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetNetworkByIdMock()),
        )
      }),rest.put('*/searches/:searchId/networks/:networkId', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getModifyNetworkMock()),
        )
      }),rest.delete('*/searches/:searchId/networks/:networkId', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getDeleteNetworkMock()),
        )
      }),]
