/**
 * Generated by orval v6.2.3 üç∫
 * Do not edit manually.
 * Jobbi Back-end
 * Swagger for Jobbi Back-end

Schemes: [http, https]
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction
} from 'react-query'
import type {
  OfferDTO,
  OfferDTOBody
} from '../../types/dtos'
import { customInstance } from '.././config'

type AsyncReturnType<
T extends (...args: any) => Promise<any>
> = T extends (...args: any) => Promise<infer R> ? R : any;


/**
 * type id struct
Get offers by searchId.
Return offer
 */
export const getOffersBySearchId = (
    searchId: string,
 ) => {
      return customInstance<OfferDTO[]>(
      {url: `/searches/${searchId}/offers`, method: 'get'
    },
      );
    }
  

export const getGetOffersBySearchIdQueryKey = (searchId: string,) => [`/searches/${searchId}/offers`];

    
export const useGetOffersBySearchId = <TData = AsyncReturnType<typeof getOffersBySearchId>, TError = void>(
 searchId: string, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getOffersBySearchId>, TError, TData>, }

  ) => {

  const {query: queryOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetOffersBySearchIdQueryKey(searchId);
  const queryFn: QueryFunction<AsyncReturnType<typeof getOffersBySearchId>> = () => getOffersBySearchId(searchId, );

  const query = useQuery<AsyncReturnType<typeof getOffersBySearchId>, TError, TData>(queryKey, queryFn, {enabled: !!(searchId), ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

/**
 * type id struct
Create offer.
Return offer
 */
export const addOffer = (
    searchId: string,
    offerDTOBody: OfferDTOBody,
 ) => {
      return customInstance<OfferDTO>(
      {url: `/searches/${searchId}/offers`, method: 'post',
      data: offerDTOBody
    },
      );
    }
  


    export const useAddOffer = <TError = void,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof addOffer>, TError,{searchId: string;data: OfferDTOBody}, TContext>, }
) => {
      const {mutation: mutationOptions} = options || {}

      const mutationFn: MutationFunction<AsyncReturnType<typeof addOffer>, {searchId: string;data: OfferDTOBody}> = (props) => {
          const {searchId,data} = props || {};

          return  addOffer(searchId,data,)
        }

      return useMutation<AsyncReturnType<typeof addOffer>, TError, {searchId: string;data: OfferDTOBody}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * type id struct
Get offer by id.
Return offer
 */
export const getOfferById = (
    searchId: string,
    offerId: string,
 ) => {
      return customInstance<OfferDTO>(
      {url: `/searches/${searchId}/offers/${offerId}`, method: 'get'
    },
      );
    }
  

export const getGetOfferByIdQueryKey = (searchId: string,
    offerId: string,) => [`/searches/${searchId}/offers/${offerId}`];

    
export const useGetOfferById = <TData = AsyncReturnType<typeof getOfferById>, TError = void>(
 searchId: string,
    offerId: string, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getOfferById>, TError, TData>, }

  ) => {

  const {query: queryOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetOfferByIdQueryKey(searchId,offerId);
  const queryFn: QueryFunction<AsyncReturnType<typeof getOfferById>> = () => getOfferById(searchId,offerId, );

  const query = useQuery<AsyncReturnType<typeof getOfferById>, TError, TData>(queryKey, queryFn, {enabled: !!(searchId && offerId), ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

/**
 * type id struct
Modify offer.
Return offer
 */
export const modifyOffer = (
    searchId: string,
    offerId: string,
    offerDTOBody: OfferDTOBody,
 ) => {
      return customInstance<OfferDTO>(
      {url: `/searches/${searchId}/offers/${offerId}`, method: 'put',
      data: offerDTOBody
    },
      );
    }
  


    export const useModifyOffer = <TError = void,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof modifyOffer>, TError,{searchId: string;offerId: string;data: OfferDTOBody}, TContext>, }
) => {
      const {mutation: mutationOptions} = options || {}

      const mutationFn: MutationFunction<AsyncReturnType<typeof modifyOffer>, {searchId: string;offerId: string;data: OfferDTOBody}> = (props) => {
          const {searchId,offerId,data} = props || {};

          return  modifyOffer(searchId,offerId,data,)
        }

      return useMutation<AsyncReturnType<typeof modifyOffer>, TError, {searchId: string;offerId: string;data: OfferDTOBody}, TContext>(mutationFn, mutationOptions)
    }
    