/**
 * Generated by orval v6.2.4 üç∫
 * Do not edit manually.
 * Jobbi Back-end
 * Swagger for Jobbi Back-end

Schemes: [http, https]
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  UseMutationOptions,
  MutationFunction
} from 'react-query'
import type {
  FriendshipDTO
} from '../../types/dtos'
import { customInstance } from '.././config'

type AsyncReturnType<
T extends (...args: any) => Promise<any>
> = T extends (...args: any) => Promise<infer R> ? R : any;


/**
 * type id struct
Create friendship.
Return friendship
 */
export const addFriendship = (
    searchId: string,
    friendshipDTO: FriendshipDTO,
 ) => {
      return customInstance<FriendshipDTO>(
      {url: `/searches/${searchId}/friendships`, method: 'post',
      data: friendshipDTO
    },
      );
    }
  


    export const useAddFriendship = <TError = void,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof addFriendship>, TError,{searchId: string;data: FriendshipDTO}, TContext>, }
) => {
      const {mutation: mutationOptions} = options || {}

      const mutationFn: MutationFunction<AsyncReturnType<typeof addFriendship>, {searchId: string;data: FriendshipDTO}> = (props) => {
          const {searchId,data} = props || {};

          return  addFriendship(searchId,data,)
        }

      return useMutation<AsyncReturnType<typeof addFriendship>, TError, {searchId: string;data: FriendshipDTO}, TContext>(mutationFn, mutationOptions)
    }
    