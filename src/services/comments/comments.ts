/**
 * Generated by orval v6.2.4 üç∫
 * Do not edit manually.
 * Jobbi Back-end
 * Swagger for Jobbi Back-end

Schemes: [http, https]
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction
} from 'react-query'
import type {
  CommentForPostDto,
  CreateCommentResponseDto,
  CommentCreateRequestDto,
  CommentUpdateDto,
  CommentUpdateRequestDto
} from '../../types/dtos'
import { customInstance } from '.././config'

type AsyncReturnType<
T extends (...args: any) => Promise<any>
> = T extends (...args: any) => Promise<infer R> ? R : any;


/**
 * type id struct
Get comments for post
Return comments
 */
export const getCommentsForPost = (
    searchId: string,
    postId: string,
 ) => {
      return customInstance<CommentForPostDto[]>(
      {url: `/searches/${searchId}/posts/${postId}/comments`, method: 'get'
    },
      );
    }
  

export const getGetCommentsForPostQueryKey = (searchId: string,
    postId: string,) => [`/searches/${searchId}/posts/${postId}/comments`];

    
export const useGetCommentsForPost = <TData = AsyncReturnType<typeof getCommentsForPost>, TError = void>(
 searchId: string,
    postId: string, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getCommentsForPost>, TError, TData>, }

  ) => {

  const {query: queryOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetCommentsForPostQueryKey(searchId,postId);
  const queryFn: QueryFunction<AsyncReturnType<typeof getCommentsForPost>> = () => getCommentsForPost(searchId,postId, );

  const query = useQuery<AsyncReturnType<typeof getCommentsForPost>, TError, TData>(queryKey, queryFn, {enabled: !!(searchId && postId), ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

/**
 * type id struct
Add comment for post
Return comment
 */
export const createCommentForPost = (
    searchId: string,
    postId: string,
    commentCreateRequestDto: CommentCreateRequestDto,
 ) => {
      return customInstance<CreateCommentResponseDto>(
      {url: `/searches/${searchId}/posts/${postId}/comments`, method: 'post',
      data: commentCreateRequestDto
    },
      );
    }
  


    export const useCreateCommentForPost = <TError = void,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof createCommentForPost>, TError,{searchId: string;postId: string;data: CommentCreateRequestDto}, TContext>, }
) => {
      const {mutation: mutationOptions} = options || {}

      const mutationFn: MutationFunction<AsyncReturnType<typeof createCommentForPost>, {searchId: string;postId: string;data: CommentCreateRequestDto}> = (props) => {
          const {searchId,postId,data} = props || {};

          return  createCommentForPost(searchId,postId,data,)
        }

      return useMutation<AsyncReturnType<typeof createCommentForPost>, TError, {searchId: string;postId: string;data: CommentCreateRequestDto}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * type id struct
Update comment for post
Return comment
 */
export const updateCommentById = (
    searchId: string,
    postId: string,
    commentId: string,
    commentUpdateRequestDto: CommentUpdateRequestDto,
 ) => {
      return customInstance<CommentUpdateDto>(
      {url: `/searches/${searchId}/posts/${postId}/comments/${commentId}`, method: 'put',
      data: commentUpdateRequestDto
    },
      );
    }
  


    export const useUpdateCommentById = <TError = void,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof updateCommentById>, TError,{searchId: string;postId: string;commentId: string;data: CommentUpdateRequestDto}, TContext>, }
) => {
      const {mutation: mutationOptions} = options || {}

      const mutationFn: MutationFunction<AsyncReturnType<typeof updateCommentById>, {searchId: string;postId: string;commentId: string;data: CommentUpdateRequestDto}> = (props) => {
          const {searchId,postId,commentId,data} = props || {};

          return  updateCommentById(searchId,postId,commentId,data,)
        }

      return useMutation<AsyncReturnType<typeof updateCommentById>, TError, {searchId: string;postId: string;commentId: string;data: CommentUpdateRequestDto}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * type id struct
Delete comment by id
Return boolean
 */
export const deteCommentById = (
    searchId: string,
    postId: string,
    commentId: string,
 ) => {
      return customInstance<boolean>(
      {url: `/searches/${searchId}/posts/${postId}/comments/${commentId}`, method: 'delete'
    },
      );
    }
  


    export const useDeteCommentById = <TError = void,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof deteCommentById>, TError,{searchId: string;postId: string;commentId: string}, TContext>, }
) => {
      const {mutation: mutationOptions} = options || {}

      const mutationFn: MutationFunction<AsyncReturnType<typeof deteCommentById>, {searchId: string;postId: string;commentId: string}> = (props) => {
          const {searchId,postId,commentId} = props || {};

          return  deteCommentById(searchId,postId,commentId,)
        }

      return useMutation<AsyncReturnType<typeof deteCommentById>, TError, {searchId: string;postId: string;commentId: string}, TContext>(mutationFn, mutationOptions)
    }
    