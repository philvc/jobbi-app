/**
 * Generated by orval v6.2.4 üç∫
 * Do not edit manually.
 * Jobbi Back-end
 * Swagger for Jobbi Back-end

Schemes: [http, https]
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery,
  UseQueryOptions,
  QueryFunction
} from 'react-query'
import type {
  SearchWithOwnerAndFriendsDTO,
  GetUserFriendshipsParams
} from '../../types/dtos'
import { customInstance } from '.././config'

type AsyncReturnType<
T extends (...args: any) => Promise<any>
> = T extends (...args: any) => Promise<infer R> ? R : any;


/**
 * type id struct
Get user friendships.
Return friendship
 */
export const getUserFriendships = (
    userId: string,
    params?: GetUserFriendshipsParams,
 ) => {
      return customInstance<SearchWithOwnerAndFriendsDTO[]>(
      {url: `/users/${userId}/friendships`, method: 'get',
        params,
    },
      );
    }
  

export const getGetUserFriendshipsQueryKey = (userId: string,
    params?: GetUserFriendshipsParams,) => [`/users/${userId}/friendships`, ...(params ? [params]: [])];

    
export const useGetUserFriendships = <TData = AsyncReturnType<typeof getUserFriendships>, TError = void>(
 userId: string,
    params?: GetUserFriendshipsParams, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getUserFriendships>, TError, TData>, }

  ) => {

  const {query: queryOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetUserFriendshipsQueryKey(userId,params);
  const queryFn: QueryFunction<AsyncReturnType<typeof getUserFriendships>> = () => getUserFriendships(userId,params, );

  const query = useQuery<AsyncReturnType<typeof getUserFriendships>, TError, TData>(queryKey, queryFn, {enabled: !!(userId), ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

