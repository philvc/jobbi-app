/**
 * Generated by orval v6.2.4 üç∫
 * Do not edit manually.
 * Jobbi Back-end
 * Swagger for Jobbi Back-end

Schemes: [http, https]
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery,
  UseQueryOptions,
  QueryFunction
} from 'react-query'
import type {
  PostDTOBySearchId
} from '../../types/dtos'
import { customInstance } from '.././config'

type AsyncReturnType<
T extends (...args: any) => Promise<any>
> = T extends (...args: any) => Promise<infer R> ? R : any;


/**
 * type id struct
Get post by  id.
Return post
 */
export const getPostById = (
    searchId: string,
    postId: string,
 ) => {
      return customInstance<PostDTOBySearchId>(
      {url: `/searches/${searchId}/posts/${postId}`, method: 'get'
    },
      );
    }
  

export const getGetPostByIdQueryKey = (searchId: string,
    postId: string,) => [`/searches/${searchId}/posts/${postId}`];

    
export const useGetPostById = <TData = AsyncReturnType<typeof getPostById>, TError = void>(
 searchId: string,
    postId: string, options?: { query?:UseQueryOptions<AsyncReturnType<typeof getPostById>, TError, TData>, }

  ) => {

  const {query: queryOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetPostByIdQueryKey(searchId,postId);
  const queryFn: QueryFunction<AsyncReturnType<typeof getPostById>> = () => getPostById(searchId,postId, );

  const query = useQuery<AsyncReturnType<typeof getPostById>, TError, TData>(queryKey, queryFn, {enabled: !!(searchId && postId), ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

