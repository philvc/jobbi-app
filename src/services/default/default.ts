/**
 * Generated by orval v6.2.3 üç∫
 * Do not edit manually.
 * Jobbi Back-end
 * Swagger for Jobbi Back-end

Schemes: [http, https]
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction
} from 'react-query'
import type {
  UserDTO
} from '../../types/dtos'
import { customInstance } from '.././config'

type AsyncReturnType<
T extends (...args: any) => Promise<any>
> = T extends (...args: any) => Promise<infer R> ? R : any;


/**
 * Return user
 * @summary Get user by sub.
 */
export const getUserBySub = (
    
 ) => {
      return customInstance<UserDTO>(
      {url: `/me`, method: 'get'
    },
      );
    }
  

export const getGetUserBySubQueryKey = () => [`/me`];

    
export const useGetUserBySub = <TData = AsyncReturnType<typeof getUserBySub>, TError = void>(
  options?: { query?:UseQueryOptions<AsyncReturnType<typeof getUserBySub>, TError, TData>, }

  ) => {

  const {query: queryOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetUserBySubQueryKey();
  const queryFn: QueryFunction<AsyncReturnType<typeof getUserBySub>> = () => getUserBySub();

  const query = useQuery<AsyncReturnType<typeof getUserBySub>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}

/**
 * Return user
 * @summary Put user.
 */
export const modifyUser = (
    userDTO: UserDTO,
 ) => {
      return customInstance<UserDTO>(
      {url: `/me`, method: 'put',
      data: userDTO
    },
      );
    }
  


    export const useModifyUser = <TError = void,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof modifyUser>, TError,{data: UserDTO}, TContext>, }
) => {
      const {mutation: mutationOptions} = options || {}

      const mutationFn: MutationFunction<AsyncReturnType<typeof modifyUser>, {data: UserDTO}> = (props) => {
          const {data} = props || {};

          return  modifyUser(data,)
        }

      return useMutation<AsyncReturnType<typeof modifyUser>, TError, {data: UserDTO}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * Return user
 * @summary Create new user.
 */
export const createUser = (
    userDTO: UserDTO,
 ) => {
      return customInstance<UserDTO>(
      {url: `/users`, method: 'post',
      data: userDTO
    },
      );
    }
  


    export const useCreateUser = <TError = void,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<AsyncReturnType<typeof createUser>, TError,{data: UserDTO}, TContext>, }
) => {
      const {mutation: mutationOptions} = options || {}

      const mutationFn: MutationFunction<AsyncReturnType<typeof createUser>, {data: UserDTO}> = (props) => {
          const {data} = props || {};

          return  createUser(data,)
        }

      return useMutation<AsyncReturnType<typeof createUser>, TError, {data: UserDTO}, TContext>(mutationFn, mutationOptions)
    }
    